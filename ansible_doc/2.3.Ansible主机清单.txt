主机清单：
    Ansible可同时操作属于一个组的多台主机，组和主机之间的关系通过inventory文件进行配置（主机的定义方式可以有多个，在配置文件的enable_plugins中定义其读取顺序），默认的文件路径为“/etc/ansible/hosts”

hosts主机清单：
    [webservers]：定义一个主机组。
    alpha.example.org：使用主机名来定义一个被控端主机。
    host1：5522：指定连接该主机的主机名和ssh端口号。
    host2 http_port=80 maxRequestsPerChild=808：除定义主机名外还定义了主机变量。
    host3 ansible_ssh_port=5555 ansible_ssh_host=192.168.50.100：定义主机ssh连接端口和连接地址。
    192.168.1.110 ansible_ssh_pass=redhat：为该主机定义ssh密码，避免的命令行中输入密码。

    www[001:006].example.com：定义www001.example.com、www002.example.com...www006.example.com这多个主机。
    www[a:f].example.com：定义了wwwa.wxample.com、wwwb.example.com...wwwf.example.com这多个主机。

    [dbservers]
    db01.intranet.mydomain.net ansible_python_interpreter=/usr/local/bin/python：定主了python执行文件的路径。
    db02.intranet.mydomain.net ruby_module_host ansible_ruby_interpreter=/usr/bin/ruby.1.9.3：定义了ruby执行文件的路径。

    [test-hosts:vars]：定义test-hosts主机组以及为该组定义的变量。
    ntp_server=ntp.example.com
    localhost ansible_connection=local：定义该主机的连接类型，此处的连接类型为local，即本地主机。

    [server:children]：定义server的子成员，其中包含了webservers组和dbservers组。
    webservers
    dbservers

yaml类型的主机清单：主机组可以嵌套。
    all:
      children:
        usa:
          children:
            southeast:
              children:
                atlanta:
                  hosts:
                    host1:
                    host2:
                raleign:
                  hosts:
                    host2:
                    host3:
              vars:
                some_server: foo.southeast.example.com
                halon_system_timeout: 30
                self_destruct_countdown: 60
                escape_pods: 2
            northeast:

ansible的默认组：
    all：所有的主机。
    ungrouped：包含没有组的主机。

    注意：all和ungrouped组不会出现在group_names之类的变量的组列表中。

变量合并：
    优先顺序，all最低，host最高：
        1、all group（because it is the 'parent' of all other groups）。
        2、parent groups
        3、child group
        4、host

    相同组时，可以使用ansible_group_priority调整优先级，数值越大优先级越高，默认为1，相同优先级时，后定义的会覆盖前面定义的。

查看定义的主机清单中的变量：
    1、在主机清单中定义变量
        # vim /etc/ansible/hosts
            [test]
            localhost ansible_connection=local

            [node1]
            192.168.7.190 test=123

            [test2:children]
            test
            node1

            [test2:vars]
            test2=test2
        注意：test2组中包含一两个主机组，并为test2组定义了组内所有的变量。

    2、查看主机或主机组的变量
        # ansible node1 -m debug -a "msg={{test}}"
            192.168.7.190 | SUCCESS => {
                "msg": 123
            }
        # ansible node1 -m debug -a "msg={{test2}}"
            192.168.7.190 | SUCCESS => {
                "msg": "test2"
            }

    3、定义一个全局变量
        # vim /etc/ansible/hosts
            [all:vars]
            test3=all_test3

    4、验证全局变量是否生效
        # ansible all -m debug -a "msg={{test3}}"
            localhost | SUCCESS => {
                "msg": "all_test3"
            }
            192.168.7.190 | SUCCESS => {
                "msg": "all_test3"
            }

    5、再在test2组中增加一个变量，测试变量的优先级
        # vim /etc/ansible/hosts
            [test2:vars]
            test2=test2
            test3=only_use_for_test2

    6、验证test3变量的值
        # ansible all -m debug -a "msg={{test3}}"
            localhost | SUCCESS => {
                "msg": "only_use_for_test2"
            }
            192.168.7.190 | SUCCESS => {
                "msg": "only_use_for_test2"
            }

    注意： 变量所在的范围越小，优先级越高。