联合查询：
	自然联结：
		将两张表中的对应字段做等值关联，但实现等值联结的两个表中的字段不能为空，有一个为空则不会出现在最终结果里，且自然联结一般放在WHERE子句进之后，JOIN上的关联一般会通过外键来实现（或两表中有相同字段），以“employees”库为例（见示例1）。

	内联结：
		SELECT select_expr [, select_expr ...] FROM tb_name1 [INNER] JOIN tb_name2 {ON | WHERE} EXPRESSION...
		在内联结中使用“ON”或“WHERE”来引用过滤条件的效果和执行方式都是一样的，见示例4。

	注意：自然联结和内联结根据EXPLAIN得出的执行计划可以知道两个语法是等价的（但建议使用自然联结），见示例5。

	左外联结：以第一张表为标准则称之为左外连接，只保留出现在左外连接运算之前（左边）的关系中的记录，并以左表中的字段为准，如果右表中没有与之对应的对应字段则显示NULL。
		SELECT select_expr [, select_expr ...] FROM tb_name1 LEFT [OUTER] JOIN tb_name2 ON EXPRESSION ...
		
		示例6：查询employees库中不是经理的员工的人数
		示例7：查询employees库中不是经理的员工的工号、姓名、部门名称、title、入职日期、薪资、薪资对应时间的相应信息。

	右外联结：以第二张表作为标准则称之为右外连接，只保留出现在右外连接运算之后（右边）的关系中的记录，并以右表中的字段为准，如果左表中没有与之对应的字段为空则显示NULL。

示例1：查看员工的工号、姓名和对应的title。
	mysql> SELECT
		-> * 
		-> FROM
		-> employees.titles,
		-> employees.employees 
		-> WHERE
		-> employees.titles.emp_no = employees.employees.emp_no 
		-> LIMIT 1;
		+--------+-----------------+------------+------------+--------+------------+------------+-----------+--------+------------+
		| emp_no | title           | from_date  | to_date    | emp_no | birth_date | first_name | last_name | gender | hire_date  |
		+--------+-----------------+------------+------------+--------+------------+------------+-----------+--------+------------+
		|  10001 | Senior Engineer | 1986-06-26 | 9999-01-01 |  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |
		+--------+-----------------+------------+------------+--------+------------+------------+-----------+--------+------------+
	注意：在上述结果中两张表是通过“employees.titles.emp_no = employees.employees.emp_no”进行关联的，并且其结果将两张表中的所有信息均展现出来了，因此可进行精简，如示例2。

示例2：
	mysql> SELECT
		-> titles.emp_no,
		-> CONCAT( employees.last_name, employees.first_name ),
		-> titles.title
		-> FROM
		-> titles,
		-> employees 
		-> WHERE
		-> titles.emp_no = employees.emp_no 
		-> LIMIT 10;
		+--------+---------------------------------------------------------+-----------------+
		| emp_no | CONCAT( employees.last_name, " ",employees.first_name ) | title           |
		+--------+---------------------------------------------------------+-----------------+
		|  10001 | Facello Georgi                                          | Senior Engineer |
		+--------+---------------------------------------------------------+-----------------+
	注意：在上述的查询结果中已经将需要的信息展示出来了，但显示的字段的名称仍可以优化，见示例3。

示例3：
	mysql> SELECT
		-> titles.emp_no AS id,
		-> CONCAT( employees.last_name, employees.first_name ) AS name,
		-> titles.title AS title
		-> FROM
		-> titles,
		-> employees 
		-> WHERE
		-> titles.emp_no = employees.emp_no 
		-> LIMIT 10;
		+-------+------------------+-----------------+
		| id    | name             | title           |
		+-------+------------------+-----------------+
		| 10001 | Facello Georgi   | Senior Engineer |
		+-------+------------------+-----------------+
	注意：在上述的展示结果中已经进行了优化。

示例4：
	mysql> SELECT
		-> t.emp_no AS id,
		-> CONCAT( e.first_name, " ", e.last_name ) AS NAME,
		-> t.title AS title,
		-> e.gender AS gender,
		-> e.birth_date 
		-> FROM
		-> titles AS t
		-> INNER JOIN employees AS e 
		-> WHERE
		-> t.emp_no = e.emp_no 
		-> ORDER BY
		-> e.birth_date 
		-> LIMIT 5;
		+--------+-------------------+-----------------+--------+------------+
		| id     | NAME              | title           | gender | birth_date |
		+--------+-------------------+-----------------+--------+------------+
		| 406121 | Supot Remmele     | Senior Staff    | M      | 1952-02-01 |
		| 406121 | Supot Remmele     | Staff           | M      | 1952-02-01 |
		| 237571 | Ronghao Schaad    | Senior Staff    | M      | 1952-02-01 |
		| 237571 | Ronghao Schaad    | Staff           | M      | 1952-02-01 |
		| 207658 | Kiyokazu Whitcomb | Senior Engineer | M      | 1952-02-01 |
		+--------+-------------------+-----------------+--------+------------+

示例5：
	mysql> EXPLAIN SELECT
		-> t.emp_no AS id,
		-> CONCAT( e.first_name, " ", e.last_name ) AS NAME,
		-> t.title AS title,
		-> e.gender AS gender,
		-> e.birth_date 
		-> FROM
		-> titles AS t
		-> INNER JOIN employees AS e -- 使用了内联结
		-> WHERE
		-> t.emp_no = e.emp_no 
		-> ORDER BY
		-> e.birth_date 
		-> LIMIT 5; -- ANSI SQL 89的语法
		+----+-------------+-------+------------+------+---------------+---------+---------+--------------------+--------+----------+----------------+
		| id | select_type | table | partitions | type | possible_keys | key     | key_len | ref                | rows   | filtered | Extra          |
		+----+-------------+-------+------------+------+---------------+---------+---------+--------------------+--------+----------+----------------+
		|  1 | SIMPLE      | e     | NULL       | ALL  | PRIMARY       | NULL    | NULL    | NULL               | 299246 |   100.00 | Using filesort |
		|  1 | SIMPLE      | t     | NULL       | ref  | PRIMARY       | PRIMARY | 4       | employees.e.emp_no |      1 |   100.00 | Using index    |
		+----+-------------+-------+------------+------+---------------+---------+---------+--------------------+--------+----------+----------------+

	mysql> EXPLAIN SELECT
		-> t.emp_no AS id,
		-> CONCAT( e.first_name, " ", e.last_name ) AS NAME,
		-> t.title AS title,
		-> e.gender AS gender,
		-> e.birth_date 
		-> FROM
		-> titles AS t,
		-> employees AS e -- 使用自然联结
		-> WHERE
		-> t.emp_no = e.emp_no 
		-> ORDER BY 
		-> e.birth_date 
		-> LIMIT 5; -- ANSI SQL 92的语法
		+----+-------------+-------+------------+------+---------------+---------+---------+--------------------+--------+----------+----------------+
		| id | select_type | table | partitions | type | possible_keys | key     | key_len | ref                | rows   | filtered | Extra          |
		+----+-------------+-------+------------+------+---------------+---------+---------+--------------------+--------+----------+----------------+
		|  1 | SIMPLE      | e     | NULL       | ALL  | PRIMARY       | NULL    | NULL    | NULL               | 299246 |   100.00 | Using filesort |
		|  1 | SIMPLE      | t     | NULL       | ref  | PRIMARY       | PRIMARY | 4       | employees.e.emp_no |      1 |   100.00 | Using index    |
		+----+-------------+-------+------------+------+---------------+---------+---------+--------------------+--------+----------+----------------+

示例6：查询employees库中不是经理的员工的人数
	mysql> SELECT
		-> e.emp_no AS id,
		-> CONCAT( first_name, " ", last_name ) 
		-> FROM
		-> employees AS e
		-> LEFT JOIN dept_manager AS d ON e.emp_no = d.emp_no 
		-> WHERE
		-> d.emp_no IS NULL
		-> LIMIT 10;
		+-------+--------------------------------------+
		| id    | CONCAT( first_name, " ", last_name ) |
		+-------+--------------------------------------+
		| 10001 | Georgi Facello                       |
		| 10002 | Bezalel Simmel                       |
		| 10003 | Parto Bamford                        |
		| 10004 | Chirstian Koblick                    |
		| 10005 | Kyoichi Maliniak                     |
		| 10006 | Anneke Preusig                       |
		| 10007 | Tzvetan Zielinski                    |
		| 10008 | Saniya Kalloufi                      |
		| 10009 | Sumant Peac                          |
		| 10010 | Duangkaew Piveteau                   |
		+-------+--------------------------------------+

示例7：查询employees库中不是经理的员工的工号、姓名、部门名称、title、入职日期、薪资、薪资对应时间的相应信息（此处的薪资、title和部门应该为当前最新的，因此在各表中应先以员为条件进行分组，而后查出最新的数据再与其他表进行关联查询）。
	mysql> SELECT
		-> e.emp_no AS id,
		-> CONCAT( first_name, ' ', last_name ) AS NAME,
		-> dept_name,
		-> title,
		-> t.from_date AS date_of_entry,
		-> s.to_date,
		-> s.from_date,
		-> salary 
		-> FROM
		-> employees AS e
		-> LEFT JOIN dept_manager AS m ON e.emp_no = m.emp_no
		-> LEFT JOIN dept_emp AS de ON e.emp_no = de.emp_no
		-> LEFT JOIN departments AS d ON de.dept_no = d.dept_no
		-> LEFT JOIN titles AS t ON e.emp_no = t.emp_no
		-> LEFT JOIN salaries AS s ON s.emp_no = e.emp_no
		-> WHERE m.emp_no IS NULL
		-> LIMIT 5;
		+-------+----------------+-------------+-----------------+---------------+------------+------------+--------+
		| id    | NAME           | dept_name   | title           | date_of_entry | to_date    | from_date  | salary |
		+-------+----------------+-------------+-----------------+---------------+------------+------------+--------+
		| 10001 | Georgi Facello | Development | Senior Engineer | 1986-06-26    | 1987-06-26 | 1986-06-26 |  60117 |
		| 10001 | Georgi Facello | Development | Senior Engineer | 1986-06-26    | 1988-06-25 | 1987-06-26 |  62102 |
		| 10001 | Georgi Facello | Development | Senior Engineer | 1986-06-26    | 1989-06-25 | 1988-06-25 |  66074 |
		| 10001 | Georgi Facello | Development | Senior Engineer | 1986-06-26    | 1990-06-25 | 1989-06-25 |  66596 |
		| 10001 | Georgi Facello | Development | Senior Engineer | 1986-06-26    | 1991-06-25 | 1990-06-25 |  66961 |
		+-------+----------------+-------------+-----------------+---------------+------------+------------+--------+

	注意：不是经理的员工应该不存在于dept_manager表中。