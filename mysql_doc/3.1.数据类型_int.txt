INT型：
	+---------------------+---------+----------------------+----------------------+
	|       TYPE          |  BYTES  |        MIN           |         MAX          |
	+---------------------+---------+----------------------+----------------------+
	| TINYINT(signed)     | 1       | -128                 | 127                  |
	| TINYINT(unsigned)   | 1       | 0                    | 255                  |
	| SMALLINT(signed)    | 2       | -32768               | 32767                |
	| SMALLINT(unsigned)  | 2       | 0                    | 65535                |
	| MEDIUMINT(signed)   | 3       | -8388608             | 8388607              |
	| MEDIUMINT(unsigned) | 3       | 0                    | 16777215             |
	| INT(signed)         | 4       | -2147483648          | 2147483647           |
	| INT(unsigned)       | 4       | 0                    | 4294967295           |
	| BIGINT(signed)      | 8       | -9223372036854775808 | 9223372036854775807  |
	| BIGINT(unsigned)    | 8       | 0                    | 18446744073709551615 |
	+---------------------+---------+----------------------+----------------------+

	注意：
		1、对于ID的类型的字段建议使用“BIGINT UNSIGNED”，因为ID一般会设置为“AUTO_INCREMENT”，如果设置为其他类型很容易增长到上限。
		2、建表时如未指定为“UNSIGNED”则默认为“SINGNED”。

UNSIGNED：
	UNSIGNED属性是将数字类弄无符号化，与C、C++中的“unsigned”含义相同。
		例如：INT类型的范围是-2147483648～2147483647，那么INT UNSIGNED的范围就是0～4294967295。

	注意：
		1、两个“UNSIGNED”的数值，使用小的减大的会出现“BIGINT UNSIGNED value is out of range ...”导致内存溢出的错误，一般不建议使用“UNSIGNED”。
		2、为避免两个“UNSIGNED”的数的小数值减去大数出现的内存溢出的错误可将sql_mode设置为“no_unsigned_subtraction”。

	示例1：
		mysql> CREATE TABLE `t1` (`a` int(10) unsigned DEFAULT NULL, `b` int(10) unsigned DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
		msyql> INSERT INTO test1.t1 select 1,2;
		mysql> SELECT a-b FROM test1.t1;
			BIGINT UNSIGNED value is out of range in '(`test1`.`t1`.`a` - `test1`.`t1`.`b`)'
		mysql> SET sql_mode="no_unsigned_subtraction";
		mysql> SELECT a-b FROM test1.t1;
			+-----+
			| a-b |
			+-----+
			|  -1 |
			+-----+

ZEROFILL：
	显示属性，在“int(#)”中“#”与“zerofill”搭配，通过“#”指定数字位的显示位数，而通过“zerofill”将无数字位以“0”填充（如示例1）。

	示例1：
		mysql> CREATE TABLE t2 (id int(6) zerofill);
		mysql> CREATE TABLE test1.t2 (id int(6) zerofill);
		mysql> INSERT INTO test1.t2 SELECT 1;
		mysql> SELECT * FROM test1.t2;
			+--------+
			| id     |
			+--------+
			| 000001 |
			+--------+
		mysql> INSERT INTO test1.t2 SELECT 1111111;
		mysql> SELECT * FROM test1.t2;
			+---------+
			| id      |
			+---------+
			|  000001 |
			| 1111111 |
			+---------+

AUTO_INCREMENT：
	1、自增。
	2、每张表仅能有一个定义为“AUTO_INCREMENT”的列。
	3、设置为“AUTO_INCREMENT”的列的字段必须是索引的一部分。
	4、被设置为“AUTO_INCREMENT”的列也可以插入“-1”。
	5、一般而言被设置为“AUTO_INCREMENT”无法插入数字0（但可通过“UPDATE”的方式修改其中的值，详见示例2）。

	示例1：
		mysql> CREATE TABLE t3 (id int auto_increment primary key ) AUTO_INCREMENT=0;
		mysql> INSERT INTO t3 SELECT NULL;
		mysql> SELECT * FROM t3;
			+----+
			| id |
			+----+
			|  1 |
			+----+
		mysql> INSERT INTO t3 SELECT -1;
		mysql> SELECT * FROM t3;
			+----+
			| id |
			+----+
			| -1 |
			|  1 |
			|  2 |
			+----+

	示例2：
		mysql> UPDATE test1.t3 SET id=0 WHERE id=-1;
		mysql> SELECT * FROM t3;
			+----+
			| id |
			+----+
			|  0 |
			|  1 |
			|  2 |
			|  3 |
			+----+
		mysql> INSERT INTO test1.t3 VALUES (NULL),(100),(NULL);
		mysql> SELECT * FROM test1.t3;
			+-----+
			| id  |
			+-----+
			|   0 |
			|   1 |
			|   2 |
			|   3 |
			|   4 |
			| 100 |
			| 101 |
			+-----+
